# Linux/Mac add symlink
# ln -s /Users/damiensutton/Development/gitconfigs/.gitconfig-alias ~/.gitconfig-alias

# Windows add symlink (Powershell)
# New-Item -ItemType SymbolicLink -Path "$env:USERPROFILE\.gitconfig-alias" -Target "W:\Development\gitconfigs\.gitconfig-alias"

[alias]
    a = add # Stage changes to be committed    
    ac = "!git add -A && git commit -m" # Stage all changes and commit with a message in one command
    amend = "!git add . && git commit --amend" # Amend the last commit with staged changes
    b = branch  # Show all branches or manage branches
    backout = "!git reset && git checkout . && git clean -f" # Revert all changes and clean the working directory    
    bd = branch -d # Delete a branch   
    bls = branch -a  # List all branches, including remote ones    
    c = commit -m # Commit with a message    
    clean-b = "!sh -c 'git branch --merged | grep -vE \"^\\*|dev|main|release|master|development|develop\" | grep -v \"${1:-^$}\" | xargs -I {} git branch -d {}' -"
    clean-b-check = "!sh -c 'git branch --merged | grep -vE \"^\\*|dev|main|release|master|development|develop\" | grep -v \"${1:-^$}\" | xargs -I {} echo {}' -"
    co = checkout  # Switch branches or restore files    
    cod = checkout . # Discard all changes in the working directory    
    f = fetch # Fetch updates from the remote repository    
    l = log --graph --decorate --all --pretty=format:'%C(yellow)%h %C(cyan)%C(bold)%ad %C(green)%an%C(auto)%d %Creset%s' --date=short # Show a graphical log with detailed commit information    
    ll = log --stat --no-merges # Show a detailed log with file changes, add -n for the last n commits only    
    lt = "!git l -10" # Show the last 10 commits in the graphical log format    
    llt = "!git ll -10" # Show the last 10 commits with detailed changes    
    nb = checkout -b # Create a new branch and switch to it    
    p = pull # Pull changes from the remote repository    
    pt = push origin --follow-tags # Push changes with tags to the remote repository    
    rank = shortlog -sn --no-merges # Show contributors ranked by commit count    
    rh = reset HEAD # Reset changes in the staging area    
    rv = remote -v # Show all remote URLs    
    s = status -s # Show a concise status of the working directory    
    se = "!git rev-list --all | xargs git grep -F" # Search for a string in all commits    
    search = "!git branch -a | sed '/->/d' | sed 's/\\*//' | xargs git grep -n -I" # Search for a string across all branches    
    sq = merge --squash # Merge changes into the current branch with squash commits    
    ss = status # Show the working directory status    
    st = stash -u # Stash changes, including untracked files    
    sw = switch # Switch branches   
    swc = switch -c  # Create and switch to a new branch    
    swnb = switch -c # Create and switch to a new branch (alternate)   
    t = tag  # Manage tags    
    ta = "!f() { git tag -a $1 -m /"$1/"; }; f" # Create an annotated tag    
    td = tag -d # Delete a tag    
    uc = reset --soft HEAD~1 # Undo the last commit but keep changes in the working directory    
    pub = "publish" # Publish the current branch to origin and track it    
    publish = "!git push -u origin $(git branch-name)" # Publish the current branch to origin (detailed command)    
    branch-name = "!git rev-parse --abbrev-ref HEAD" # Show the current branch name


